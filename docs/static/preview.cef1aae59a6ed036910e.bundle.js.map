{"version":3,"file":"static/preview.cef1aae59a6ed036910e.bundle.js","sources":["webpack:///./bower_components/o-comments/src/javascripts/Widget.js"],"sourcesContent":["const auth = require('./auth.js');\nconst envConfig = require('./config.js');\nconst WidgetUi = require('./WidgetUi.js');\nconst utils = require('./utils.js');\nconst oCommentUtilities = require('o-comment-utilities');\nconst userDialogs = require('./userDialogs.js');\nconst i18n = require('./i18n.js');\nconst globalEvents = require('./globalEvents.js');\nconst oCommentUi = require('o-comment-ui');\nconst oCommentApi = require('o-comment-api');\nconst resourceLoader = require('./resourceLoader.js');\nconst oTrackingIntegration = require('./oTrackingIntegration');\n\n/* global Livefyre */\n\n/**\n * Incorporates the loading of Livefyre core resources, communication with SUDS and caching,\n * Livefyre authentication, Livefyre's widget loading mechanism with the possibility to extend and modify\n * the process.\n *\n * #### Configuration:\n * ##### Mandatory fields:\n *  - articleId: ID of the article, any string\n *  - url: canonical URL of the page\n *  - title: Title of the page\n *\n * ##### Optional fields:\n *  - stream_type: livecomments, livechat, liveblog\n *  - livefyre: object which contains key-value pairs which should be added to the init object\n *  - stringOverrides: key-value pairs which override default LF strings\n *  - authPageReload: if authentication needs a page reload. By default it's false.\n *  - section: Override the default mapping based on URL or CAPI with an explicit mapping. Section parameter should be a valid FT metadata term (Primary section)\n *  - tags: Tags which will be added to the collection in Livefyre\n *\n * @param {object|string} rootEl Root element in which the widget should be loaded.\n * @param {object}        config Configuration object. See in the description the fields that are mandatory.\n * @return {undefined}\n */\nfunction Widget () {\n\toCommentUi.Widget.apply(this, arguments);\n\n\tlet self = this;\n\n\tif (!this.config) {\n\t\treturn;\n\t}\n\n\tthis.forceMode = false;\n\n\tthis.config.stream_type = this.config.stream_type || 'livecomments';\n\tthis.config.layout = this.config.layout || 'main';\n\tthis.config.hideDeleteEnabled = this.config.hideDeleteEnabled === false ? false : true;\n\tthis.config.hideDeleteInterval = this.config.hideDeleteInterval || 60 * 48; // minutes, default 48 hours\n\n\tif (!this.config.livefyre || typeof this.config.livefyre !== 'object') {\n\t\tthis.config.livefyre = {};\n\t}\n\tthis.config.livefyre.editorCss = this.config.livefyre.editorCss || 'p { margin-bottom: 10px !important; }';\n\n\t/**\n\t * Avatar disabled.\n\t */\n\tthis.config.livefyre.disableAvatars = typeof this.config.livefyre.disableAvatars === 'boolean' ? this.config.livefyre.disableAvatars : true;\n\n\t/**\n\t * Disable HTML5 shiv by Livefyre\n\t */\n\tthis.config.livefyre.disableIE8Shim = typeof this.config.livefyre.disableIE8Shim === 'boolean' ? this.config.livefyre.disableIE8Shim : true;\n\n\t/**\n\t * Disable Livefyre internal analytics\n\t */\n\tthis.config.livefyre.disableThirdPartyAnalytics = typeof this.config.livefyre.disableThirdPartyAnalytics === 'boolean' ? this.config.livefyre.disableThirdPartyAnalytics : true;\n\n\tthis.config.livefyre.replyShowMoreInitial = this.config.livefyre.replyShowMoreInitial ? parseInt(this.config.livefyre.replyShowMoreInitial, 10) : 3;\n\n\n\tif (this.getWidgetEl().className.indexOf('o-comments') === -1) {\n\t\tthis.getWidgetEl().className += ' o-comments';\n\t}\n\tif (this.getWidgetEl().className.indexOf('o-comments--lf-overrides') === -1) {\n\t\tthis.getWidgetEl().className += ' o-comments--lf-overrides';\n\t}\n\tif (this.getWidgetEl().className.indexOf('o-comments--comment-type-' + self.config.stream_type) === -1) {\n\t\tthis.getWidgetEl().className += ' o-comments--comment-type-' + self.config.stream_type;\n\t}\n\tif (this.config.layout) {\n\t\tthis.getWidgetEl().className += ' o-comments--comment-layout-' + this.config.layout;\n\t}\n\tthis.getWidgetEl().setAttribute('data-o-comments-built', 'true');\n\n\tthis.config.stringOverrides = this.config.stringOverrides || {};\n\n\tthis.ui = new WidgetUi(this.getWidgetEl(), {\n\t\tlayout: this.config.layout,\n\t\tstream_type: this.config.stream_type\n\t});\n\n\t/**\n\t * Merge custom string overrides with FT specific string overrides.\n\t * @type {Object}\n\t */\n\tconst stringOverrides = self.config.stringOverrides ? oCommentUtilities.merge({}, i18n.lfStringOverride, self.config.stringOverrides) : i18n.lfStringOverride;\n\tself.config.stringOverrides = stringOverrides;\n\n\tlet destroyed = false;\n\n\n\tif (utils.isLivefyreActionQueuePresent()) {\n\t\toCommentUtilities.logger.log('Force flag set.');\n\n\t\tthis.forceMode = true;\n\t}\n\n\n\tconst executeWhenNotDestroyed = function (func) {\n\t\treturn function () {\n\t\t\tif (!destroyed) {\n\t\t\t\tfunc.apply(this, arguments);\n\t\t\t}\n\t\t};\n\t};\n\n\t/**\n\t * Loads init data from the SUDS service.\n\t * @param {Function} callback function (err, data), where data is the init object\n\t * @returns {undefined}\n\t */\n\tthis.loadInitData = function (callback) {\n\t\tconst config = {\n\t\t\ttitle: self.config.title,\n\t\t\turl: self.config.url,\n\t\t\tarticleId: self.config.articleId,\n\t\t\telId: self.config.elId,\n\t\t\tstream_type: self.config.stream_type\n\t\t};\n\t\tif (typeof self.config.section !== 'undefined') {\n\t\t\tconfig.section = self.config.section;\n\t\t}\n\t\tif (typeof self.config.tags !== 'undefined') {\n\t\t\tconfig.tags = self.config.tags;\n\t\t}\n\n\t\toCommentApi.api.getLivefyreInitConfig(config, executeWhenNotDestroyed(function (err, initData) {\n\t\t\tif (err) {\n\t\t\t\tcallback(err);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tcallback(null, initData);\n\t\t}));\n\t};\n\n\tthis.render = function (initData, callback) {\n\t\tif (initData && !destroyed) {\n\t\t\tif (initData.unclassifiedArticle !== true && initData.notAllowedToCreateCollection !== true) {\n\t\t\t\tresourceLoader.loadLivefyreCore(executeWhenNotDestroyed(function (err) {\n\t\t\t\t\tif (err) {\n\t\t\t\t\t\tself.trigger('error.widget', err);\n\t\t\t\t\t\tself.onError(err);\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tself.trigger('widget.ready');\n\n\t\t\t\t\t// extends the init data received from SUDS with some user specified fields.\n\t\t\t\t\tlet key;\n\t\t\t\t\tfor (key in self.config.livefyre) {\n\t\t\t\t\t\tif (self.config.livefyre.hasOwnProperty(key)) {\n\t\t\t\t\t\t\tinitData[key] = self.config.livefyre[key];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (self.config.authPageReload === true || self.config.livefyre.authPageReload) {\n\t\t\t\t\t\tinitData.authPageReload = true;\n\t\t\t\t\t\tauth.authPageReload = true;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst networkConfig = {\n\t\t\t\t\t\tnetwork: envConfig.get().livefyre.network\n\t\t\t\t\t};\n\t\t\t\t\tif (self.config.stringOverrides) {\n\t\t\t\t\t\tnetworkConfig.strings = self.config.stringOverrides;\n\t\t\t\t\t}\n\n\t\t\t\t\tLivefyre.require(['fyre.conv#3', 'auth'], executeWhenNotDestroyed(function (Conv, lfAuth) {\n\t\t\t\t\t\tlfAuth.delegate(auth.getAuthDelegate());\n\n\t\t\t\t\t\tself.ui.clearContainer();\n\n\t\t\t\t\t\toCommentUtilities.logger.debug('initData passed to Livefyre', initData);\n\n\t\t\t\t\t\tnew Conv(networkConfig, [initData], executeWhenNotDestroyed(function (widget) {\n\t\t\t\t\t\t\tif (widget) {\n\t\t\t\t\t\t\t\tcallback();\n\n\t\t\t\t\t\t\t\tself.lfWidget = widget;\n\t\t\t\t\t\t\t\tself.trigger('widget.load', {\n\t\t\t\t\t\t\t\t\tlfWidget: widget\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\toTrackingIntegration.trackSuccessLoad();\n\n\t\t\t\t\t\t\t\twidget.on('initialRenderComplete', executeWhenNotDestroyed(function () {\n\t\t\t\t\t\t\t\t\tconst collectionAttributes = self.lfWidget.getCollection().attributes;\n\t\t\t\t\t\t\t\t\t// init stream to monitor banned comments\n\t\t\t\t\t\t\t\t\tinitStreamForBannedComments(collectionAttributes.id, collectionAttributes.event);\n\n\t\t\t\t\t\t\t\t\tself.ui.addTermsAndGuidelineMessage();\n\n\t\t\t\t\t\t\t\t\tif (self.config.hideDeleteEnabled) {\n\t\t\t\t\t\t\t\t\t\tself.ui.hideDeleteButtons(self.config.hideDeleteInterval);\n\t\t\t\t\t\t\t\t\t\tself.ui.onNewCommentVisible(() => {\n\t\t\t\t\t\t\t\t\t\t\tself.ui.hideDeleteButtons(self.config.hideDeleteInterval);\n\t\t\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\t\t\tsetInterval(() => {\n\t\t\t\t\t\t\t\t\t\t\tself.ui.hideDeleteButtons(self.config.hideDeleteInterval);\n\t\t\t\t\t\t\t\t\t\t}, 10000);\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tif (envConfig.get().emailNotifications !== true) {\n\t\t\t\t\t\t\t\t\t\tself.ui.hideFollowButton();\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tif (self.config.layout !== 'side') {\n\t\t\t\t\t\t\t\t\t\tself.ui.moveCommentCountOut();\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tif (envConfig.get().showEnvironment === true) {\n\t\t\t\t\t\t\t\t\t\tself.ui.showEnvironment(envConfig.get().livefyre.network);\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tauth.login(function (loggedIn, authData) {\n\t\t\t\t\t\t\t\t\t\tif (!authData) {\n\t\t\t\t\t\t\t\t\t\t\tauthData = null;\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\tself.trigger('data.auth', authData);\n\n\t\t\t\t\t\t\t\t\t\tif (loggedIn) {\n\t\t\t\t\t\t\t\t\t\t\tif (self.forceMode === true) {\n\t\t\t\t\t\t\t\t\t\t\t\tsetTimeout(self.ui.scrollToWidget, 2000);\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\tauth.logout();\n\t\t\t\t\t\t\t\t\t\t\tif (authData) {\n\t\t\t\t\t\t\t\t\t\t\t\tif (authData.pseudonym === false) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tif (self.forceMode === true) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tauth.loginRequiredPseudonymMissing(null, true);\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\t\t\tself.ui.hideSignInLink();\n\t\t\t\t\t\t\t\t\t\t\t\t} else if (authData.serviceUp === false) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tself.ui.makeReadOnly();\n\t\t\t\t\t\t\t\t\t\t\t\t\tself.ui.hideSignInLink();\n\t\t\t\t\t\t\t\t\t\t\t\t\tself.ui.addAuthNotAvailableMessage();\n\t\t\t\t\t\t\t\t\t\t\t\t\tself.ui.hideTermsAndGuidelinesMessage();\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\t\tself.trigger('widget.renderComplete');\n\t\t\t\t\t\t\t\t}));\n\n\t\t\t\t\t\t\t\tconst siteId = parseInt(initData.siteId, 10);\n\t\t\t\t\t\t\t\twidget.on('commentPosted', executeWhenNotDestroyed(function (eventData) {\n\t\t\t\t\t\t\t\t\tif (!auth.pseudonymWasMissing) {\n\t\t\t\t\t\t\t\t\t\toCommentApi.api.getAuth(function (err, authData) {\n\t\t\t\t\t\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\t\t\t\t\t\tauthData = null;\n\t\t\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\tif (self.config.emailAlert !== false && envConfig.get().emailNotifications === true) {\n\t\t\t\t\t\t\t\t\t\t\t\tif (authData && typeof authData === 'object') {\n\t\t\t\t\t\t\t\t\t\t\t\t\tif (authData.token && !authData.settings) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tuserDialogs.showEmailAlertDialog();\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tauth.pseudonymWasMissing = false;\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tself.trigger('tracking.postComment', {\n\t\t\t\t\t\t\t\t\t\tsiteId: siteId,\n\t\t\t\t\t\t\t\t\t\tlfEventData: eventData\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\toTrackingIntegration.trackPost(siteId, eventData.parent);\n\n\t\t\t\t\t\t\t\t\tif (eventData.sharedToFacebook === true) {\n\t\t\t\t\t\t\t\t\t\toTrackingIntegration.trackShare(siteId, 'facebook');\n\t\t\t\t\t\t\t\t\t} else if (eventData.sharedToTwitter === true) {\n\t\t\t\t\t\t\t\t\t\toTrackingIntegration.trackShare(siteId, 'twitter');\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}));\n\n\t\t\t\t\t\t\t\twidget.on('commentLiked', executeWhenNotDestroyed(function (eventData) {\n\t\t\t\t\t\t\t\t\tself.trigger('tracking.likeComment', {\n\t\t\t\t\t\t\t\t\t\tsiteId: siteId,\n\t\t\t\t\t\t\t\t\t\tlfEventData: eventData\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\toTrackingIntegration.trackLike(siteId);\n\t\t\t\t\t\t\t\t}));\n\n\t\t\t\t\t\t\t\twidget.on('commentShared', executeWhenNotDestroyed(function (eventData) {\n\t\t\t\t\t\t\t\t\tself.trigger('tracking.shareComment', {\n\t\t\t\t\t\t\t\t\t\tsiteId: siteId,\n\t\t\t\t\t\t\t\t\t\tlfEventData: eventData\n\t\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\t\tif (eventData.sharedToFacebook === true) {\n\t\t\t\t\t\t\t\t\t\toTrackingIntegration.trackShare(siteId, 'facebook');\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tif (eventData.sharedToTwitter === true) {\n\t\t\t\t\t\t\t\t\t\toTrackingIntegration.trackShare(siteId, 'twitter');\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}));\n\n\t\t\t\t\t\t\t\twidget.on('socialMention', executeWhenNotDestroyed(function (eventData) {\n\t\t\t\t\t\t\t\t\tself.trigger('tracking.socialMention', {\n\t\t\t\t\t\t\t\t\t\tsiteId: siteId,\n\t\t\t\t\t\t\t\t\t\tlfEventData: eventData\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\toTrackingIntegration.trackLike(siteId, eventData.provider);\n\t\t\t\t\t\t\t\t}));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}));\n\t\t\t\t\t}));\n\t\t\t\t}));\n\t\t\t} else {\n\t\t\t\tif (initData.unclassifiedArticle === true) {\n\t\t\t\t\tcallback({\n\t\t\t\t\t\tunclassifiedArticle: true\n\t\t\t\t\t});\n\t\t\t\t} else if (initData.notAllowedToCreateCollection === true) {\n\t\t\t\t\tcallback({\n\t\t\t\t\t\tnotAllowedToCreateCollection: true\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\tthis.onError = function (err) {\n\t\tself.ui.clearContainer();\n\n\t\tif (typeof err === 'object'&& err.unclassifiedArticle !== true && err.notAllowedToCreateCollection !== true) {\n\t\t\tself.ui.addNotAvailableMessage();\n\t\t}\n\t};\n\n\tlet errorTrackSent = false;\n\tthis.on('error.widget', function (evt) {\n\t\tconst err = evt.detail.data;\n\n\t\tif ((err && !err.unclassifiedArticle &&!err.notAllowedToCreateCollection) || !err) {\n\t\t\tif (!errorTrackSent) {\n\t\t\t\terrorTrackSent = true;\n\n\t\t\t\tif (typeof Livefyre === 'undefined') {\n\t\t\t\t\toTrackingIntegration.trackLivefyreDown();\n\t\t\t\t} else {\n\t\t\t\t\toTrackingIntegration.trackSudsDown();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\tthis.on('error.init', function () {\n\t\tif (!errorTrackSent) {\n\t\t\terrorTrackSent = true;\n\t\t\toTrackingIntegration.trackSudsDown();\n\t\t}\n\t});\n\n\n\n\t/**\n\t * Adds the \"Commenting settings\" link when login occurs.\n\t * @returns {undefined}\n\t */\n\tfunction login () {\n\t\tconst showSettingsDialog = function () {\n\t\t\toCommentApi.api.getAuth(function (err, currentAuthData) {\n\t\t\t\tif (!err && currentAuthData) {\n\t\t\t\t\tuserDialogs.showSettingsDialog(currentAuthData, function (err, newAuthData) {\n\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (newAuthData && newAuthData.token) {\n\t\t\t\t\t\t\toCommentUtilities.logger.debug('new settings', newAuthData);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t};\n\n\t\tconst showChangePseudonymDialog = function () {\n\t\t\toCommentApi.api.getAuth(function (err, currentAuthData) {\n\t\t\t\tif (!err && currentAuthData) {\n\t\t\t\t\tuserDialogs.showChangePseudonymDialog(currentAuthData.displayName, function (err, newAuthData) {\n\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (newAuthData && newAuthData.token) {\n\t\t\t\t\t\t\toCommentUtilities.logger.debug('new settings', newAuthData);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t};\n\n\t\tconst showConfigDialog = executeWhenNotDestroyed(function () {\n\t\t\tif (envConfig.get().emailNotifications !== true) {\n\t\t\t\tshowChangePseudonymDialog();\n\t\t\t} else {\n\t\t\t\tshowSettingsDialog();\n\t\t\t}\n\t\t});\n\n\t\tself.ui.addSettingsLink({\n\t\t\tonClick: function () {\n\t\t\t\tauth.loginRequired(function (err) {\n\t\t\t\t\tif (err) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tshowConfigDialog();\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t}\n\tglobalEvents.on('auth.login', login);\n\n\t/**\n\t * Removes the \"Commenting settings\" link when logout occurs.\n\t * @returns {undefined}\n\t */\n\tfunction logout () {\n\t\tself.ui.removeSettingsLink();\n\t}\n\tglobalEvents.on('auth.logout', logout);\n\n\n\tfunction initStreamForBannedComments (collectionId, lastEventId) {\n\t\toCommentApi.api.stream.create(collectionId, {\n\t\t\tlastEventId: lastEventId,\n\t\t\tcallback: handleStreamEventForBannedComments\n\t\t});\n\t}\n\n\tfunction handleStreamEventForBannedComments (eventData) {\n\t\tif (eventData.comment) {\n\t\t\tif (eventData.comment.visibility === 2) {\n\t\t\t\tself.ui.showCommentBanned(eventData.comment.commentId);\n\t\t\t} else if (eventData.comment.lastVisibility === 2 || eventData.comment.deleted === true) {\n\t\t\t\tself.ui.removeCommentBanned(eventData.comment.commentId);\n\t\t\t}\n\t\t}\n\t}\n\n\n\n\tlet __superDestroy = this.destroy;\n\tthis.destroy = function () {\n\t\tdestroyed = true;\n\t\tself.forceMode = null;\n\n\t\tif (self.lfWidget && self.lfWidget.getCollection().attributes) {\n\t\t\toCommentApi.api.stream.destroy(self.lfWidget.getCollection().attributes.id, {\n\t\t\t\tcallback: handleStreamEventForBannedComments\n\t\t\t});\n\t\t}\n\n\t\tself.lfWidget = null;\n\n\t\tglobalEvents.off('auth.login', login);\n\t\tglobalEvents.off('auth.logout', logout);\n\n\t\t__superDestroy();\n\t\t__superDestroy = null;\n\n\t\tself = null;\n\t};\n\n\n\n\t// init\n\tif (this.config.autoInit !== false) {\n\t\tthis.init();\n\t}\n}\noCommentUi.Widget.__extend(Widget, 'oComments', 'o-comments');\n\nWidget.__extend = function(child, eventNamespace, classNamespace) {\n\tif (typeof Object.create === 'function') {\n\t\tchild.prototype = Object.create(Widget.prototype);\n\t} else {\n\t\tconst Tmp = function () {};\n\t\tTmp.prototype = Widget.prototype;\n\t\tchild.prototype = new Tmp();\n\t\tchild.prototype.constructor = child;\n\t}\n\n\tif (eventNamespace) {\n\t\tchild.prototype.eventNamespace = eventNamespace;\n\t}\n\n\tif (classNamespace) {\n\t\tchild.prototype.classNamespace = classNamespace;\n\t}\n};\n\nmodule.exports = Widget;\n"],"mappings":"AAAA","sourceRoot":""}