{"version":3,"file":"static/2.2951927c552d540284c6.bundle.js","sources":["webpack:///./bower_components/o-ads/main.js"],"sourcesContent":["function Ads() {\n\taddDOMEventListener();\n}\n\n// bung all our modules on the protoype\nAds.prototype.config = require('./src/js/config');\nAds.prototype.slots = require('./src/js/slots');\nAds.prototype.gpt = require('./src/js/ad-servers/gpt');\nAds.prototype.krux = require('./src/js/data-providers/krux');\nAds.prototype.api = require('./src/js/data-providers/api');\nAds.prototype.targeting = require('./src/js/targeting');\nAds.prototype.utils = require('./src/js/utils');\n\n/**\n* Initialises the ads library and all sub modules\n* @param options {object} a JSON object containing configuration for the current page\n*/\nAds.prototype.init = function(options) {\n\tthis.config.init();\n\tthis.config(options);\n\tconst targetingApi = this.config().targetingApi;\n\tconst validateAdsTrafficApi = this.config().validateAdsTrafficApi;\n\n\t// Don't need to fetch anything if no targeting or bot APIs configured.\n\tif(!targetingApi && !validateAdsTrafficApi) {\n\t\treturn Promise.resolve(this.initLibrary());\n\t}\n\n\tconst targetingPromise = targetingApi ? this.api.init(targetingApi, this) : Promise.resolve();\n\tconst validateAdsTrafficPromise = validateAdsTrafficApi ? fetch(validateAdsTrafficApi).then(res => res.json()) : Promise.resolve();\n\t\n\t/*\n\t\tWe only want to stop the oAds library from initializing if\n\t\tthe validateAdsTrafficApi says the user is a robot. Otherwise we catch()\n\t\tall errors and initialise the library anyway.\n\t */\n\treturn Promise.all([validateAdsTrafficPromise, targetingPromise])\n\t\t.then(([validateAdsTrafficResponse, targetingResponse]) => {\n\t\t\tif (isRobot(validateAdsTrafficResponse)) {\n\t\t\t\tthis.config({\"dfp_targeting\": {\"ivtmvt\": \"1\"}});\n\t\t\t}\n\t\t\t\n\t\t\tconst enableKrux = shouldEnableKrux(targetingResponse);\n\t\t\tif (!enableKrux && localStorage.getItem('kxkuid')) {\n\t\t\t\t\tObject\n\t\t\t\t\t\t.keys(localStorage)\n\t\t\t\t\t\t.filter((key) => /(^kx)|(^_kx)/.test(key))\n\t\t\t\t\t\t.forEach(item => localStorage.removeItem(item));\n\t\t\t}\n\t\t\t\n\t\t\treturn this.initLibrary({ enableKrux: enableKrux });\n\t\t})\n\t\t// If anything fails, default to load ads without targeting\n\t\t.catch(e => {\n\t\t\treturn this.initLibrary();\n\t\t});\n};\n\nAds.prototype.updateContext = function(options, isNewPage) {\n\tthis.config(options);\n\n\tif(options.targetingApi) {\n\t\tthis.api.reset();\n\t\treturn this.api.init(options.targetingApi, this)\n\t\t\t.then(() => {\n\t\t\t\t\tthis.gpt.updatePageTargeting(this.targeting.get());\n\t\t\t\t/* istanbul ignore else */\n\t\t\t\t\tif(this.config('krux')) {\n\t\t\t\t\t\tthis.krux.setAllAttributes();\n\t\t\t\t\t\tthis.krux.sendNewPixel(isNewPage);\n\t\t\t\t\t}\n\t\t\t});\n\t} else {\n\t\treturn Promise.resolve();\n\t}\n\n};\n\nAds.prototype.initLibrary = function(options = { enableKrux: true}) {\n\tthis.slots.init();\n\tthis.gpt.init();\n\tif(options.enableKrux) {\n\t\tthis.krux.init();\n\t}\n\tthis.utils.on('debug', this.debug.bind(this));\n\tthis.isInitialised = true;\n\tthis.utils.broadcast('initialised', this);\n\tremoveDOMEventListener();\n\treturn this;\n};\n\nconst initAll = function() {\n\treturn ads.init().then(() => {\n\t\tconst slots = Array.from(document.querySelectorAll('.o-ads, [data-o-ads-name]'));\n\t\tslots.forEach(ads.slots.initSlot.bind(ads.slots));\n\t})\n};\n\nAds.prototype.debug = function (){\n\tlet remove = true;\n\tif (localStorage.getItem('oAds')) {\n\t\tremove = false;\n\t} else {\n\t\tlocalStorage.setItem('oAds', true);\n\t}\n\tthis.gpt.debug();\n\tthis.krux.debug();\n\tthis.slots.debug();\n\tthis.targeting.debug();\n\n\tif (remove) {\n\t\tlocalStorage.removeItem('oAds');\n\t}\n};\n\nfunction isRobot(validateAdsTrafficResponse) {\n\treturn validateAdsTrafficResponse && validateAdsTrafficResponse.isRobot;\n}\n\n// targetingResponse is of the form [userTargetingResponse, pageTargetingResponse]\nfunction shouldEnableKrux(targetingResponse) {\n\ttry {\n\t\treturn targetingResponse[0].consent.behavioural;\n\t} catch(e) {\n\t\t// Enable krux by default\n\t\treturn true;\n\t}\n}\n\nfunction addDOMEventListener() {\n\tdocument.addEventListener('o.DOMContentLoaded', initAll);\n}\nfunction removeDOMEventListener() {\n\tdocument.removeEventListener('o.DOMContentLoaded', initAll);\n}\n\nconst ads = new Ads();\nmodule.exports = ads;\n"],"mappings":"AAAA","sourceRoot":""}